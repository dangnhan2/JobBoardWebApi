// <auto-generated />
using System;
using JobBoardWebApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobBoardWebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250526095013_DeletePhotoTable")]
    partial class DeletePhotoTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.ApplicationJobMapping", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationJobMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.CandidateSkillMapping", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkillMapping");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("918c9268-83a7-48c4-ac99-0666bf7ec306"),
                            LogoUrl = "/images/logo/fpt-software.png",
                            Name = "FPT Software"
                        },
                        new
                        {
                            Id = new Guid("33ac2d39-5f8a-4cdd-9a70-48d84566bfd0"),
                            LogoUrl = "/images/logo/VNPT-logo.png",
                            Name = "VNPT Technology"
                        },
                        new
                        {
                            Id = new Guid("2479a6fa-8f27-4f3c-9347-370b670462fc"),
                            LogoUrl = "/images/logo/vng.png",
                            Name = "VNG Corporation"
                        },
                        new
                        {
                            Id = new Guid("d4dbba25-69e4-4dde-9ec6-b8957369558f"),
                            LogoUrl = "/images/logo/TMA-Solutions-Logo.png",
                            Name = "TMA Solutions"
                        },
                        new
                        {
                            Id = new Guid("45799118-bd2d-4bea-8548-525da4c5a8cb"),
                            LogoUrl = "/images/logo/kms-logo.png",
                            Name = "KMS Technology"
                        },
                        new
                        {
                            Id = new Guid("38f6e635-a668-438e-bcaf-1496437567ac"),
                            LogoUrl = "/images/logo/axon.png",
                            Name = "Axon Active"
                        },
                        new
                        {
                            Id = new Guid("150a9cd7-b425-4c08-8111-8c65c8fe65e4"),
                            LogoUrl = "/images/logo/cmc.png",
                            Name = "CMC Corporation"
                        },
                        new
                        {
                            Id = new Guid("40827481-aec8-4aec-8365-01266ce2e71d"),
                            LogoUrl = "/images/logo/nash-tech.png",
                            Name = "NashTech"
                        },
                        new
                        {
                            Id = new Guid("45730681-a492-4dca-b0f2-328b217c148d"),
                            LogoUrl = "/images/logo/haranvan.png",
                            Name = "Haravan"
                        },
                        new
                        {
                            Id = new Guid("34ab60dc-3960-4683-8f52-02e09e7f85b5"),
                            LogoUrl = "/images/logo/VNPT-logo.png",
                            Name = "Orient Software"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Created_At")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Updated_At")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b46ed5b4-b6be-4c8f-90a4-2c8a1e9d1070"),
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("d1c3b82f-e64d-48e6-a086-1a31874ea4c1"),
                            Name = "Fresher"
                        },
                        new
                        {
                            Id = new Guid("2c87ee47-8df2-4901-b2b5-7b3365154f0f"),
                            Name = "Junior"
                        },
                        new
                        {
                            Id = new Guid("277f7c38-5dcd-43bc-82a9-8b6d1582641a"),
                            Name = "Middle"
                        },
                        new
                        {
                            Id = new Guid("505dfd95-8791-4299-a4ec-fea374383f24"),
                            Name = "Senior"
                        },
                        new
                        {
                            Id = new Guid("4c538d10-7fbb-4c6d-ab13-015a1b0d674c"),
                            Name = "Leader"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ae62d2c-e96f-47b1-ba50-a7ce3d5890e6"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("750c3e08-c59a-42b3-8b8f-018d8f323a2e"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("c211171a-2c9d-4406-8c87-87d4a2775665"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("f1c71f60-6650-443c-b22a-befb1f80683d"),
                            Name = "SQL"
                        },
                        new
                        {
                            Id = new Guid("51b42eca-b8c5-4851-ba8f-371fd3ae5a3b"),
                            Name = "HTML/CSS"
                        },
                        new
                        {
                            Id = new Guid("f964ac54-8cb5-42a4-8948-c9188bbb47e0"),
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("9a6eb404-080d-49c6-969a-7300681fa568"),
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("e53cd856-87a0-4d27-a9c4-7686b6028de5"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("2f72ee02-16cf-461a-b786-f1bdff01c861"),
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = new Guid("8455dc33-5c0c-4876-b51a-035a4c44abbd"),
                            Name = "Azure"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Candidate", "Candidate")
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.ApplicationJobMapping", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Application", "Application")
                        .WithMany("ApplicationJobMapping")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Job", "Job")
                        .WithMany("ApplicationJobMapping")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("JobBoardWebApi.Models.Candidate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.CandidateSkillMapping", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Candidate", "Candidate")
                        .WithMany("candidateSkillMappings")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Skill", "Skill")
                        .WithMany("candidateSkillMappings")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Level", "Level")
                        .WithMany("Jobs")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Skill", "Skill")
                        .WithMany("Jobs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Level");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Recruiter", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Company", "Company")
                        .WithOne("Recruiter")
                        .HasForeignKey("JobBoardWebApi.Models.Recruiter", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.User", "User")
                        .WithOne("Recruiter")
                        .HasForeignKey("JobBoardWebApi.Models.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.Navigation("ApplicationJobMapping");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("candidateSkillMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Company", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Recruiter")
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.Navigation("ApplicationJobMapping");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Level", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Skill", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("candidateSkillMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.User", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Recruiter");
                });
#pragma warning restore 612, 618
        }
    }
}
