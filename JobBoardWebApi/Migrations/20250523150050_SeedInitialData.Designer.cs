// <auto-generated />
using System;
using JobBoardWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobBoardWebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523150050_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.ApplicationJobMapping", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationJobMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.CandidateSkillMapping", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkillMapping");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65e34caf-3ef1-46d2-a73e-5e47f48df565"),
                            Name = "FPT Software"
                        },
                        new
                        {
                            Id = new Guid("c16197f7-6298-4ccb-ae2a-328d7b7069b2"),
                            Name = "VNPT Technology"
                        },
                        new
                        {
                            Id = new Guid("5f61f57d-5ba3-4eea-9be3-958e6c6f0e3e"),
                            Name = "VNG Corporation"
                        },
                        new
                        {
                            Id = new Guid("d1a26785-f84d-470c-a114-53ba16fb8f8c"),
                            Name = "TMA Solutions"
                        },
                        new
                        {
                            Id = new Guid("9a194594-0a16-4135-a84b-39adad0f438f"),
                            Name = "KMS Technology"
                        },
                        new
                        {
                            Id = new Guid("65c08d5e-0793-42b1-a0eb-204801d2b71a"),
                            Name = "Axon Active"
                        },
                        new
                        {
                            Id = new Guid("a37a3f46-812a-43fc-9243-1a758e0639ba"),
                            Name = "CMC Corporation"
                        },
                        new
                        {
                            Id = new Guid("78286ce9-5e78-47d7-ad5b-656048c8edd2"),
                            Name = "NashTech"
                        },
                        new
                        {
                            Id = new Guid("e3e39a95-bc17-467c-96d9-56b8135e7136"),
                            Name = "Haravan"
                        },
                        new
                        {
                            Id = new Guid("0fd1dd75-2b80-4a6d-952d-08e3cda36e5e"),
                            Name = "Orient Software"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Created_At")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Updated_At")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e02ce61f-85e0-4662-b87b-0930b9cbbf29"),
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("9fd640b0-7457-407f-9c0c-ba9bbb6015f7"),
                            Name = "Fresher"
                        },
                        new
                        {
                            Id = new Guid("b51a7237-47ac-4bcf-8d7a-2e088bea0166"),
                            Name = "Junior"
                        },
                        new
                        {
                            Id = new Guid("339d84b6-43ce-4f1d-8e91-14e04c1213d3"),
                            Name = "Middle"
                        },
                        new
                        {
                            Id = new Guid("14300151-52fc-492f-a36a-f98853cae822"),
                            Name = "Senior"
                        },
                        new
                        {
                            Id = new Guid("dff9cd6e-74a5-40aa-a27d-e9f16048ca5e"),
                            Name = "Leader"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1584de84-6a67-4454-8a6c-ad7fc44a1a76"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("0cdb6634-8f3a-4091-a838-fe6a42776766"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("46313e1c-a0ee-4696-a740-4d1d5d35994e"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("b12f31d2-a71c-4589-8a31-d94e43968242"),
                            Name = "SQL"
                        },
                        new
                        {
                            Id = new Guid("ce17c151-eb47-4ff2-9fcb-7754575cad8d"),
                            Name = "HTML/CSS"
                        },
                        new
                        {
                            Id = new Guid("e5cd282b-698b-4d06-9bb4-416c8ec6d4bf"),
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("b3b936df-bb4e-43f3-ac93-5741cb9a142c"),
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("8536948b-a699-4565-b283-a9b5895c524d"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("2681736f-4298-4605-9ca0-2ec4ee46c783"),
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = new Guid("17ff414b-88a3-4e92-a8a7-3a107522f280"),
                            Name = "Azure"
                        });
                });

            modelBuilder.Entity("JobBoardWebApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Candidate", "Candidate")
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.ApplicationJobMapping", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Application", "Application")
                        .WithMany("ApplicationJobs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Job", "Job")
                        .WithMany("ApplicationJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("JobBoardWebApi.Models.Candidate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.CandidateSkillMapping", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Candidate", "Candidate")
                        .WithMany("candidateSkillMappings")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Skill", "Skill")
                        .WithMany("candidateSkillMappings")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Level", "Level")
                        .WithMany("Jobs")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.Skill", "Skill")
                        .WithMany("Jobs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Level");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Photo", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Company", "Company")
                        .WithOne("Photo")
                        .HasForeignKey("JobBoardWebApi.Models.Photo", "CompanyId");

                    b.HasOne("JobBoardWebApi.Models.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("JobBoardWebApi.Models.Photo", "UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Recruiter", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.Company", "Company")
                        .WithOne("Recruiter")
                        .HasForeignKey("JobBoardWebApi.Models.Recruiter", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.User", "User")
                        .WithOne("Recruiter")
                        .HasForeignKey("JobBoardWebApi.Models.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobBoardWebApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Application", b =>
                {
                    b.Navigation("ApplicationJobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Candidate", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("candidateSkillMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Company", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Photo")
                        .IsRequired();

                    b.Navigation("Recruiter")
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Job", b =>
                {
                    b.Navigation("ApplicationJobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Level", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.Skill", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("candidateSkillMappings");
                });

            modelBuilder.Entity("JobBoardWebApi.Models.User", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Recruiter");
                });
#pragma warning restore 612, 618
        }
    }
}
